name: Github Actions CD Pipeline for Prod

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 891377216292.dkr.ecr.ap-northeast-2.amazonaws.com/hhplus-prod:latest
  ECR_REPOSITORY: hhplus-prod

jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: '17'
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Test with Gradle
#        run: ./gradlew test

  build:
#    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Add environment variables
        run: |
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env.production
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.production
          echo "CLOUDWATCH_REGION=${{ secrets.CLOUDWATCH_REGION }}" >> .env.production
          echo "CLOUDWATCH_GROUP=${{ secrets.CLOUDWATCH_GROUP }}" >> .env.production
          echo "CLOUDWATCH_STREAM_INFO=${{ secrets.CLOUDWATCH_STREAM_INFO }}" >> .env.production
          echo "CLOUDWATCH_STREAM_ERROR=${{ secrets.CLOUDWATCH_STREAM_ERROR }}" >> .env.production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build JAR file
        run: ./gradlew bootJar

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: prod-${{ github.sha }}
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Render ECS task-definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .taskdefinition/prod-task-definition.json
          container-name: service-prod
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task-defintion
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: hhplus-prod
          cluster: hhplus-prod-cluster
          wait-for-service-stability: true
